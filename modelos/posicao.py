import copy
from modelos.contrato import Contrato # Assumindo que esta importa√ß√£o est√° correta

class Posicao:
    # Vari√°vel de classe para gerar IDs √∫nicos.
    _contador_id = 0

    def __init__(self):
        # üí° Corre√ß√£o: Atribui um ID √∫nico e incrementa o contador de classe.
        self._id = Posicao._contador_id
        Posicao._contador_id += 1 

        self._qtd_contratos = 0
        self._preco_medio = 0.0
        self._resultado = 0.0 # Resultado acumulado da posi√ß√£o
        self._historico = [] # Para o m√©todo desfazer
        self._tipo = ''      # 'comprado' ou 'vendido'
        self._ativo = ''     # 'd√≥lar' ou '√≠ndice'
        self._contratos = [] # Hist√≥rico detalhado de entradas/sa√≠das

    def entrada(self, qtd_contrato, contrato: Contrato):
        # 1. Salva o estado atual ANTES de modificar, para o 'desfazer'
        self._salvar_estado_historico()

        # 2. Valida√ß√µes iniciais (Impede trocar ativo/tipo)
        if self._qtd_contratos > 0:
            if contrato._ativo.lower() != self._ativo.lower():
                # Reverte o hist√≥rico (opera√ß√£o n√£o permitida)
                self._historico.pop() 
                return f"Erro: j√° existe posi√ß√£o aberta em {self._ativo.title()}, n√£o √© poss√≠vel operar {contrato._ativo.title()}."
            if contrato._tipo_operacao.lower() != self._tipo.lower():
                # Reverte o hist√≥rico (opera√ß√£o n√£o permitida)
                self._historico.pop() 
                return f"Erro: a posi√ß√£o atual √© '{self._tipo}', n√£o √© poss√≠vel adicionar contratos '{contrato._tipo_operacao.lower()}'."
            
        self._ativo = contrato._ativo.lower() # Garante que o ativo est√° em min√∫sculas
        self._tipo = contrato._tipo_operacao.lower() # Garante o tipo em min√∫sculas

        # 3. L√≥gica de Pre√ßo M√©dio e Quantidade
        if self._qtd_contratos == 0:
            # Primeira entrada
            self._preco_medio = contrato._preco
            self._qtd_contratos = qtd_contrato
        else:
            # Entrada adicional (recalcula pre√ßo m√©dio)
            self._calcular_novo_preco_medio(qtd_contrato, contrato)

        # 4. Adiciona o novo contrato ao hist√≥rico de opera√ß√µes
        self._contratos.append({
            'Posi√ß√£o ID': self._id,
            'Ativo': self._ativo,
            'Quantidade contratos': qtd_contrato,
            'Tipo': self._tipo,
            'Dire√ß√£o': contrato._tipo_acao, # 'Entrada'
            'Pre√ßo': contrato._preco
        })
        
        # 5. O estado final da opera√ß√£o J√Å foi salvo no in√≠cio, antes de qualquer altera√ß√£o

    def saida(self, qtd_contrato, contrato: Contrato):
        # 1. Salva o estado atual ANTES de modificar
        self._salvar_estado_historico()

        # 2. Valida quantidade
        if qtd_contrato > self._qtd_contratos:
            self._historico.pop() # Remove o estado salvo se a opera√ß√£o for inv√°lida
            print("Quantidade de contratos maior que a quantidade posicionada!")
            return

        # 3. Calcula o resultado financeiro da sa√≠da
        if self._ativo == "d√≥lar":
            if self._tipo == "comprado":
                self._calcular_saida_dolar_comprado(qtd_contrato, contrato)
            elif self._tipo == "vendido":
                self._calcular_saida_dolar_vendido(qtd_contrato, contrato)
        
        elif self._ativo == "√≠ndice":
            if self._tipo == "comprado":
                self._calcular_saida_indice_comprado(qtd_contrato, contrato)
            elif self._tipo == "vendido":
                self._calcular_saida_indice_vendido(qtd_contrato, contrato)
        
        # 4. Atualiza a quantidade de contratos
        self._qtd_contratos -= qtd_contrato

        # 5. Adiciona o contrato de sa√≠da ao hist√≥rico
        self._contratos.append({
            'Posi√ß√£o ID': self._id,
            'Ativo': self._ativo,
            'Quantidade contratos': qtd_contrato * -1, # Usa negativo para representar sa√≠da
            'Tipo': self._tipo,
            'Dire√ß√£o': contrato._tipo_acao, # 'Sa√≠da'
            'Pre√ßo': contrato._preco
        })

        # 6. üí° Zerar a posi√ß√£o se a quantidade for zero
        if self._qtd_contratos == 0:
            self._ativo = ''
            self._tipo = ''
            self._preco_medio = 0.0 # Resultado √© mantido em self._resultado

    def desfazer(self):
        if not self._historico:
            print("Nenhuma a√ß√£o para desfazer.")
            return

        # Reverte o estado para o estado anterior ao √∫ltimo salvo
        ultimo_estado = self._historico.pop()
        self._preco_medio = ultimo_estado['preco_medio']
        self._qtd_contratos = ultimo_estado['qtd_contratos']
        self._resultado = ultimo_estado['resultado']
        self._ativo = ultimo_estado['ativo']
        self._tipo = ultimo_estado['tipo']
        self._contratos = copy.deepcopy(ultimo_estado['contratos'])

        print("A√ß√£o desfeita com sucesso.")

    # --------------------------
    # M√âTODOS INTERNOS (C√ÅLCULO)
    # --------------------------
    
    def _salvar_estado_historico(self):
        """Salva o estado atual da posi√ß√£o antes de uma nova opera√ß√£o."""
        self._historico.append({
            'preco_medio': self._preco_medio,
            'qtd_contratos': self._qtd_contratos,
            'resultado': self._resultado,
            'ativo': self._ativo,
            'tipo': self._tipo,
            'contratos': copy.deepcopy(self._contratos)
        })

    def _calcular_novo_preco_medio(self, qtd_contrato, contrato: Contrato):
        """Recalcula o pre√ßo m√©dio ao adicionar mais contratos."""
        total_antigo = self._preco_medio * self._qtd_contratos
        total_novo = contrato._preco * qtd_contrato
        
        nova_qtd = self._qtd_contratos + qtd_contrato
        
        self._preco_medio = (total_antigo + total_novo) / nova_qtd
        self._qtd_contratos = nova_qtd
        
    def _calcular_saida_dolar_comprado(self, qtd_contrato, contrato: Contrato):
        """Calcula e acumula o resultado (Comprado no D√≥lar)."""
        # üí° Corre√ß√£o: Usa += para ACUMULAR o resultado da sa√≠da
        self._resultado += ((contrato._preco - self._preco_medio) * 10000) * qtd_contrato

    def _calcular_saida_dolar_vendido(self, qtd_contrato, contrato: Contrato):
        """Calcula e acumula o resultado (Vendido no D√≥lar)."""
        # üí° Corre√ß√£o: Usa += para ACUMULAR o resultado da sa√≠da
        self._resultado += ((self._preco_medio - contrato._preco) * 10000) * qtd_contrato

    def _calcular_saida_indice_comprado(self, qtd_contrato, contrato: Contrato):
        """Calcula e acumula o resultado (Comprado no √çndice)."""
        # üí° Corre√ß√£o: Usa += para ACUMULAR o resultado da sa√≠da
        self._resultado += ((contrato._preco - self._preco_medio) * 0.2) * qtd_contrato

    def _calcular_saida_indice_vendido(self, qtd_contrato, contrato: Contrato):
        """Calcula e acumula o resultado (Vendido no √çndice)."""
        # üí° Corre√ß√£o: Usa += para ACUMULAR o resultado da sa√≠da
        self._resultado += ((self._preco_medio - contrato._preco) * 0.2) * qtd_contrato
    
    # --------------------------
    # REPRESENTA√á√ÉO E LISTAGEM
    # --------------------------
    def __str__(self):
        status = f" ({self._tipo.upper()} em {self._ativo.title()})" if self._qtd_contratos > 0 else " (POSI√á√ÉO FECHADA)"
        return (
            f"Posi√ß√£o ID: {self._id}{status} | "
            f"Contratos: {self._qtd_contratos} | "
            f"Pre√ßo m√©dio: {self._preco_medio:.2f} | "
            f"Lucro/Preju√≠zo Total: {self._resultado:.2f}"
        )

    def listar_contratos(self):
        return self._contratos